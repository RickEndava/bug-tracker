pipeline {
  agent any

  stages {

    stage('Unit Tests - Backend') {
      agent {
        docker {
          image 'snakee/golang-junit:1.21'
          args "-u 1000:1000 -e HOME=${WORKSPACE} -e XDG_CACHE_HOME=${WORKSPACE}/.cache -e GOCACHE=${WORKSPACE}/.cache/go-build -e GOPATH=${WORKSPACE}/go -e GOMODCACHE=${WORKSPACE}/.cache/gomod"
          reuseNode true
        }
      }
      steps {
        dir('bugtracker-backend') {
          sh '''
            mkdir -p "$GOCACHE" "$GOMODCACHE" "$GOPATH"
            go env | sort
            #Generate coverage report
            go test -coverprofile=coverage.out -covermode=atomic ./...
            go tool cover -func=coverage.out -o coverage.html

            mkdir -p reports
            mv coverage.html reports/
          '''
        }
      }
      post {
        always {
            junit 'bugtracker-backend/report.xml'
            publishHTML(target: [
              reportDir: 'bugtracker-backend/reports',
              reportFiles: 'coverage.html',
              reportName: 'Backend Coverage Report'
            ])
        }

      }
    }

    stage('Unit Tests - Frontend') {
      agent {
        docker {
          image 'node:20-alpine'
          args "-u 1000:1000 -e HOME=${WORKSPACE}"
          reuseNode true
        }
      }
      steps {
        dir('bugtracker-frontend') {
          sh '''
            npm ci
            npm test
          '''
        }
      }
      post {
        always {
            junit 'bugtracker-frontend/test-results.xml'
        }

      }
    }

  }
}
